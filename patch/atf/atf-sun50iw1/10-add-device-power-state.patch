From 321bc21a00f9b46735bcfdca5a683ab240cd0f33 Mon Sep 17 00:00:00 2001
From: Andre Przywara <andre.przywara@arm.com>
Date: Mon, 27 Feb 2017 23:10:56 +0000
Subject: [PATCH] UNTESTED: sunxi: SCPI: add device power state support

Some generic framework to toggle AXP power rails via the SCPI device
power state interface.
TODO:
	- testing
	- check how H5 folds in

Signed-off-by: Andre Przywara <andre.przywara@arm.com>
---
 plat/sun50iw1p1/bl31_sunxi_setup.c |   2 +-
 plat/sun50iw1p1/sunxi_power.c      | 142 +++++++++++++++++++++++++++++++++++++
 plat/sun50iw1p1/sunxi_private.h    |   2 +
 plat/sun50iw1p1/sunxi_scpi.c       |  13 +++-
 4 files changed, 157 insertions(+), 2 deletions(-)

diff --git a/plat/sun50iw1p1/bl31_sunxi_setup.c b/plat/sun50iw1p1/bl31_sunxi_setup.c
index 503f4006d..027436725 100644
--- a/plat/sun50iw1p1/bl31_sunxi_setup.c
+++ b/plat/sun50iw1p1/bl31_sunxi_setup.c
@@ -252,7 +252,7 @@ void bl31_platform_setup(void)
 
 	sunxi_setup_clocks(socid);
 
-	NOTICE("SCPI: installed handler, implementation level: 111010\n");
+	NOTICE("SCPI: installed handler, implementation level: 111011\n");
 }
 
 /*******************************************************************************
diff --git a/plat/sun50iw1p1/sunxi_power.c b/plat/sun50iw1p1/sunxi_power.c
index 5aa63fe4f..8849af8bc 100644
--- a/plat/sun50iw1p1/sunxi_power.c
+++ b/plat/sun50iw1p1/sunxi_power.c
@@ -177,6 +177,148 @@ enum pmic_type {
 	PMIC_AXP803,
 } pmic_type;
 
+int sunxi_power_set_cpu_voltage(int millivolt)
+{
+	switch (pmic_type) {
+	case PMIC_AXP803:
+		return axp803_set_cpu_voltage(millivolt);
+	}
+
+	return -ENODEV;
+}
+
+/*
+ * device mapping: blocks of 8 (or 16?)
+ * block  0: DCDCn
+ * block  1: special (DC1SW, ...)
+ * block  2: ALDO
+ * block  3: DLDO
+ * block  4: ELDO
+ * block  5: FLDO
+ * block  6: GPIO
+ *
+ * state: == 0: power off
+ *        != 0: power on
+ */
+
+static uint32_t axp803_map_devices(uint16_t devid)
+{
+	unsigned int reg, bit;
+
+	switch (devid) {
+	case  0:		/* DCDC */
+	case  1:
+	case  2:
+	case  3:
+	case  4:
+	case  5:
+		reg = 0x10;
+		bit = devid;
+		break;
+	case  8:		/* DC1SW */
+		reg = 0x12;
+		bit = 7;
+		break;
+	case 16:		/* ALDO */
+	case 17:
+	case 18:
+		reg = 0x13;
+		bit = (devid & 7) + 5;
+		break;
+	case 24:		/* DLDO */
+	case 25:
+	case 26:
+	case 27:
+		reg = 0x12;
+		bit = (devid & 7) + 3;
+		break;
+	case 32:		/* ELDO */
+	case 33:
+	case 34:
+		reg = 0x13;
+		bit = (devid & 7) + 0;
+		break;
+	case 40:		/* FLDO */
+	case 41:
+		reg = 0x13;
+		bit = (devid & 7) + 2;
+		break;
+	case 48:		/* GPIO0LDO */
+	case 49:		/* GPIO1LDO */
+		/* TODO: implement */
+	default:
+		return -1;
+	}
+
+	return (bit & 0xff) | (reg << 8);
+}
+
+static unsigned int axp803_pstate_get(uint16_t device)
+{
+	uint32_t regmap = axp803_map_devices(device);
+	uint8_t reg;
+	int bit, val;
+
+	if (regmap == -1)
+		return -1;
+
+	reg = (regmap >> 8) & 0xff;
+	bit = regmap & 0xff;
+
+	val = sunxi_rsb_read(reg);
+	if (val < 0)
+		return -2;
+
+	if (val & BIT(bit))
+		return 1;
+
+	return 0;
+}
+
+unsigned int sunxi_pstate_get(uint16_t device)
+{
+	switch (pmic_type) {
+	case PMIC_AXP803:
+		return axp803_pstate_get(device);
+	}
+
+	return ~0;
+}
+
+static int axp803_pstate_set(uint16_t device, uint8_t state)
+{
+	uint32_t regmap = axp803_map_devices(device);
+	uint8_t reg;
+	int bit, val;
+
+	if (regmap == -1)
+		return -1;
+
+	reg = (regmap >> 8) & 0xff;
+	bit = regmap & 0xff;
+
+	val = sunxi_rsb_read(reg);
+	if (val < 0)
+		return -2;
+
+	if (state)
+		val |= BIT(bit);
+	else
+		val &= ~BIT(bit);
+
+	return sunxi_rsb_write(reg, val);
+}
+
+int sunxi_pstate_set(uint16_t device, uint8_t state)
+{
+	switch (pmic_type) {
+	case PMIC_AXP803:
+		return axp803_pstate_set(device, state);
+	}
+
+	return -EINVAL;
+}
+
 int sunxi_power_setup(uint16_t socid)
 {
 	int ret;
diff --git a/plat/sun50iw1p1/sunxi_private.h b/plat/sun50iw1p1/sunxi_private.h
index d2ab0e6c2..27f87839a 100644
--- a/plat/sun50iw1p1/sunxi_private.h
+++ b/plat/sun50iw1p1/sunxi_private.h
@@ -73,6 +73,8 @@ int sunxi_pmic_read(uint8_t address);
 int sunxi_pmic_write(uint8_t address, uint8_t value);
 int sunxi_power_setup(uint16_t socid);
 int sunxi_power_set_cpu_voltage(int millivolt);
+unsigned int sunxi_pstate_get(uint16_t device);
+int sunxi_pstate_set(uint16_t device, uint8_t state);
 
 void udelay(unsigned int delay);
 int sunxi_setup_clocks(uint16_t socid);
diff --git a/plat/sun50iw1p1/sunxi_scpi.c b/plat/sun50iw1p1/sunxi_scpi.c
index 4d0d71e97..6856e400e 100644
--- a/plat/sun50iw1p1/sunxi_scpi.c
+++ b/plat/sun50iw1p1/sunxi_scpi.c
@@ -65,11 +65,14 @@
 #define SCP_CMD_SENSORS_CAPS	0x15
 #define SCP_CMD_SENSORS_INFO	0x16
 #define SCP_CMD_SENSORS_VALUE	0x17
+#define SCP_CMD_PSTATE_SET	0x1b
+#define SCP_CMD_PSTATE_GET	0x1c
 
 #define SCP_CMDS_IMPLEMENTED						  \
 	GENMASK(SCP_CMD_DVFS_GET_INDEX, SCP_CMD_DVFS_CAPABILITY)	| \
 	GENMASK(SCP_CMD_CLOCK_GET_RATE, SCP_CMD_CLOCKS_CAPS)		| \
-	GENMASK(SCP_CMD_SENSORS_VALUE, SCP_CMD_SENSORS_CAPS)
+	GENMASK(SCP_CMD_SENSORS_VALUE, SCP_CMD_SENSORS_CAPS)		| \
+	GENMASK(SCP_CMD_PSTATE_SET, SCP_CMD_PSTATE_GET)
 
 /* end of SRAM A1 */
 #define SUNXI_SCPI_SHMEM_BASE   0x17e00
@@ -220,6 +223,14 @@ static uint32_t scpi_handle_cmd(int cmd, uint8_t *payload_size,
 		mmio_write_32(payload_out + 4, 0);
 		*payload_size = 8;
 		return 0;
+	case SCP_CMD_PSTATE_SET:
+		if (sunxi_pstate_set(par1 & 0xffff, (par1 >> 16) & 0xff))
+			return SCPI_E_RANGE;
+		return SCPI_OK;
+	case SCP_CMD_PSTATE_GET:
+		mmio_write_32(payload_out, sunxi_pstate_get(par1 & 0xffff));
+		*payload_size = 0x1;
+		return SCPI_OK;
 	}
 
 	return SCPI_E_SUPPORT;
