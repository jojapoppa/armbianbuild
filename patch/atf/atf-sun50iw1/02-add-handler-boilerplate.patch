From dbba58ae9f77912f2d6661e8b06817327f1e3565 Mon Sep 17 00:00:00 2001
From: Andre Przywara <andre.przywara@arm.com>
Date: Mon, 8 Aug 2016 23:45:41 +0100
Subject: [PATCH] sunxi: SCPI: add handler boilerplate

Add the basic framework to handle request via the SCPI interface. This
reads and decodes the request found in the shared memory region,
provides the function framework to handle a certain command and takes
care about passing on the return value.
This for just the basic capability call is implemented.

Signed-off-by: Andre Przywara <andre.przywara@arm.com>
---
 plat/sun50iw1p1/bl31_sunxi_setup.c |   2 +-
 plat/sun50iw1p1/platform.mk        |   1 +
 plat/sun50iw1p1/sunxi_private.h    |   3 +
 plat/sun50iw1p1/sunxi_scpi.c       | 110 +++++++++++++++++++++++++++++++++++++
 plat/sun50iw1p1/sunxi_sip_svc.c    |   7 ++-
 5 files changed, 120 insertions(+), 3 deletions(-)
 create mode 100644 plat/sun50iw1p1/sunxi_scpi.c

diff --git a/plat/sun50iw1p1/bl31_sunxi_setup.c b/plat/sun50iw1p1/bl31_sunxi_setup.c
index 5e71cc589..9e303f688 100644
--- a/plat/sun50iw1p1/bl31_sunxi_setup.c
+++ b/plat/sun50iw1p1/bl31_sunxi_setup.c
@@ -256,7 +256,7 @@ void bl31_platform_setup(void)
 
 	sunxi_setup_clocks(socid);
 
-	NOTICE("SCPI: installed handler, implementation level: 000000\n");
+	NOTICE("SCPI: installed handler, implementation level: 100000\n");
 }
 
 /*******************************************************************************
diff --git a/plat/sun50iw1p1/platform.mk b/plat/sun50iw1p1/platform.mk
index 482b11567..188e4e84d 100644
--- a/plat/sun50iw1p1/platform.mk
+++ b/plat/sun50iw1p1/platform.mk
@@ -51,5 +51,6 @@ BL31_SOURCES		+=	drivers/arm/gic/arm_gic.c		\
 				plat/sun50iw1p1/aarch64/plat_helpers.S	\
 				plat/sun50iw1p1/sunxi_clocks.c		\
 				plat/sun50iw1p1/sunxi_sip_svc.c		\
+				plat/sun50iw1p1/sunxi_scpi.c		\
 				plat/sun50iw1p1/aarch64/sunxi_common.c
 
diff --git a/plat/sun50iw1p1/sunxi_private.h b/plat/sun50iw1p1/sunxi_private.h
index aefa763c7..b07e56e79 100644
--- a/plat/sun50iw1p1/sunxi_private.h
+++ b/plat/sun50iw1p1/sunxi_private.h
@@ -75,6 +75,9 @@ int sunxi_pmic_write(uint8_t address, uint8_t value);
 void udelay(unsigned int delay);
 int sunxi_setup_clocks(uint16_t socid);
 
+/* Declarations for sunxi_scpi.c */
+uint32_t sunxi_trigger_scpi(uint32_t x1, uint32_t x2, uint32_t x3, uint32_t x4);
+
 /* Gets the SPSR for BL33 entry */
 uint32_t sunxi_get_spsr_for_bl33_entry(int aarch);
 
diff --git a/plat/sun50iw1p1/sunxi_scpi.c b/plat/sun50iw1p1/sunxi_scpi.c
new file mode 100644
index 000000000..b13dfa7d5
--- /dev/null
+++ b/plat/sun50iw1p1/sunxi_scpi.c
@@ -0,0 +1,110 @@
+/*
+ * Copyright (c) 2016,2017 ARM Limited and Contributors. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * Neither the name of ARM nor the names of its contributors may be used
+ * to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <debug.h>
+#include <plat_config.h>
+#include <mmio.h>
+#include <sys/errno.h>
+#include "sunxi_def.h"
+#include "sunxi_private.h"
+
+#define BIT(n) (1U << (n))
+#define GENMASK(hi, lo) (BIT(hi) - 1 - BIT(lo) + 1)
+
+#define SCPI_OK		0
+#define SCPI_E_PARAM	1
+#define SCPI_E_ALIGN	2
+#define SCPI_E_SIZE	3
+#define SCPI_E_HANDLER	4
+#define SCPI_E_ACCESS	5
+#define SCPI_E_RANGE	6
+#define SCPI_E_TIMEOUT	7
+#define SCPI_E_NOMEM	8
+#define SCPI_E_PWRSTATE	9
+#define SCPI_E_SUPPORT	10
+#define SCPI_E_DEVICE	11
+#define SCPI_E_BUSY	12
+
+#define SCP_CMD_CAPABILITY	0x02
+
+#define SCP_CMDS_IMPLEMENTED						  \
+	0
+
+/* end of SRAM A1 */
+#define SUNXI_SCPI_SHMEM_BASE   0x17e00
+
+static uint32_t scpi_handle_cmd(int cmd, uint8_t *payload_size,
+				uintptr_t payload_in, uintptr_t payload_out)
+{
+	switch (cmd) {
+	case SCP_CMD_CAPABILITY:
+		mmio_write_32(payload_out + 0x00, (1U << 16) | (2U << 0));
+		/*
+		 * The SCPI spec says this field holds the payload sizes for
+		 * the receive and transmit channel, but the Linux driver
+		 * decodes an event version ID from it.
+		 * Let's play nice with Linux for now and ignore the spec.
+		 *
+		 * mmio_write_32(payload_out + 0x04,
+		 *		 ((256 - 1) << 16) | (256 - 1));
+		 */
+		mmio_write_32(payload_out + 0x04, 1U << 16);
+
+		mmio_write_32(payload_out + 0x08, 1U << 24);
+		mmio_write_32(payload_out + 0x0c, SCP_CMDS_IMPLEMENTED);
+		mmio_write_32(payload_out + 0x10, 0x0);
+		mmio_write_32(payload_out + 0x14, 0x0);
+		mmio_write_32(payload_out + 0x18, 0x0);
+		*payload_size = 0x1c;
+		return SCPI_OK;
+	}
+
+	return SCPI_E_SUPPORT;
+}
+
+uint32_t sunxi_trigger_scpi(uint32_t x1, uint32_t x2, uint32_t x3, uint32_t x4)
+{
+	uint32_t ret;
+	uint64_t scpi_header;
+	uint8_t payload_size;
+
+	scpi_header = *(uint64_t *)(SUNXI_SCPI_SHMEM_BASE + 0x100);
+	payload_size = (scpi_header >> 16) & 0xff;
+
+	ret = scpi_handle_cmd(scpi_header & 0xff, &payload_size,
+			      SUNXI_SCPI_SHMEM_BASE + 0x108,
+			      SUNXI_SCPI_SHMEM_BASE + 0x8);
+
+	mmio_write_32(SUNXI_SCPI_SHMEM_BASE, (scpi_header & 0xffff) |
+		      (uint32_t)payload_size << 16);
+	mmio_write_32(SUNXI_SCPI_SHMEM_BASE + 4, ret);
+
+	return ret;
+}
diff --git a/plat/sun50iw1p1/sunxi_sip_svc.c b/plat/sun50iw1p1/sunxi_sip_svc.c
index 827aa70eb..270b488f4 100644
--- a/plat/sun50iw1p1/sunxi_sip_svc.c
+++ b/plat/sun50iw1p1/sunxi_sip_svc.c
@@ -72,8 +72,11 @@ uint64_t sunxi_sip_handler(uint32_t smc_fid,
 
 	/* SiP SMC service normal world's call */
 	switch (smc_fid) {
-	case SUNXI_SIP_MBOX_TRIGGER:
-		SMC_RET1(handle, ~0);
+	case SUNXI_SIP_MBOX_TRIGGER: {
+		uint32_t ret = sunxi_trigger_scpi(x1, x2, x3, x4);
+
+		SMC_RET1(handle, ret);
+	}
 	}
 
 	return sunxi_plat_sip_handler(smc_fid, x1, x2, x3, x4,
